package 동물;

// Animal 물려주고있는 move를 "난다"
// 실제로 물려받고 있는 메서드는 "움직인다"
// 조류가 움직이는건 맞지만 안에 로직이 "난다"로 바뀌게 만들어줘야한다!

// 오버라이딩(Override)
// 상속 관계에서 같은 이름의 메서드를 재정의(로직을 재정의)할 수 있다.
// 단, 리턴타입, 매개변수의 형태가 바뀌면 안된다!
// @Override  어노테이션


class Animal {
    String gender; // 성별
    String eat;    // 밥 먹기
    String sleep;  // 잠자기

    void move() {
        System.out.println("움직인다");
    }
}

class Bird extends Animal {
    void egg() {
        System.out.println("알을 낳는다");
    }

    @Override
    void move() {
        System.out.println("난다");
    }
}


class Penguin extends Bird {
	// Bird가 물려주는 move가 "난다."--->"헤엄치다"로 동작할 수 있도록
	@Override
	void move() {
	    System.out.println("헤엄치다.");
	   }
    void slide() {
        System.out.println("미끄러진다");
    }
}


class Eagle extends Bird {
    
}

class Mammal extends Animal {
    void baby() {
        System.out.println("새끼를 낳다");
    }
}

class Whale extends Mammal {
    @Override
    void move() {
        System.out.println("헤엄친다");
    }
}

class Pachooong extends Animal {
    
}

public class Main {
    public static void main(String[] args) {
        Bird bird = new Bird();
        bird.egg();
        bird.move();

        Penguin penguin = new Penguin();
        penguin.egg();
        penguin.move();
        penguin.slide();

        Eagle eagle = new Eagle();
        eagle.egg();
        eagle.move();

        Mammal mammal = new Mammal();
        mammal.baby();

        Whale whale = new Whale();
        whale.baby();
        whale.move();

        Pachooong pachooong = new Pachooong();
        pachooong.move();
        
        
    }
}